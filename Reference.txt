Node.JS 
---
  Js => (Runtime) => Machine Language 


  Browser 
  ---
    HTML Renderer
    CSS Parser 
    JS Engine

  Browser War 
  ---
    IE, 
    FF (Mozilla Core)
    Opera, 
    Safari (Webkit Core)
    Chrome (Chromium Core = Webkit + Mozilla + Google's JS Engine V8 )


  NodeJS = V8 JS Engine + libuv + API's + Modules + Installable 
  --
  
JS becoming Back End Language?
---
  Challenges
    1. js was sync 
    2. js can send http req and receive http resp 
    3. js cannot connect with db 
    4. js cannot access file system 

---

Naming Convention
-----------------
  files, folder names must be in kebab-case 
  should not start with number
  do not use underscore 
  no uppercase letter in file or folder names

-----



Webapps
---
  1. SSR 
      1 Server
      ---
        Codebase: HTML + CSS + JS + BackEnd + DB logic
        Resp: HTML +  CSS + JS + Data

        Disadv
        -
          1. Pages will refresh 
          2. Consumes more bandwidth 
          3. more expensive
          4. Slower Webapps 
          5. Bad User Experience
          6. Server is doing the heavy-lifting

        Adv
        ---
          1. Search Engine Friendly 
          2. Initial Loading will not take longer


  2. CSR = SPA (react / ng / vue) + RESTful API (Java/php/python/nodejs/...)

      2 Servers 
      --
        2 Apps  
        ---
          Front End App (SPA)
            Codebase: HTML, CSS, JS (React/  Ng/ Vue)
            Resp: HTML, CSS, JS, wait for data

          Back End App (Restful API)
            Codebase: Back End + DB Logic (NodeJs/expressjs/koa/)
            Resp: Data (JSON)

        Adv
        -
          1. Pages will NOT refresh 
          2. Consumes less bandwidth 
          3. less expensive
          4. Faster Webapps 
          5. Better User Experience
          6. Server's workload is shared  

        Disadv
        ---
          1. Not Search Engine Friendly 
          2. Initial Loading will take longer 


---------

#1 App: SSR App with inline template using NodeJS 
#2 App: RESTful API using NodeJS 

#3 App: SSR App with template engines using NodeJS + ExpressJS
#4 App: RESTful API using NodeJS + ExpressJS 
          * db calls 
          * auth
          * file upload (todo)



====
       
Single Page App (SPA)
---
  7 Characteristics 
  ---
    1. Pages should not reload/refresh 
    2. URL should be changed 
    3. Browser History should be maintained 
    4. Retain Header and Footer 
    5. The content in b/w header and footer should be updated 
    6. Active menu should be set 
    7. Page Title should be changed 

===========



